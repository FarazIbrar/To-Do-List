@page "/StickyNotes"
@inject IJSRuntime JS
@inject Global global
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sidebar Example</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="css/Style2.css" />
    <style>
        li:hover {
            background: inherit;
        }

        p {
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div>
        @if (toggleFlag)
        {
            <button class="toggle-button" @onclick="ToggleSidebar" style="left:2%; top: @(descriptionFlag ? "1%" : "3%"); background-color:white; font-size:1.3rem">☰</button>
        }
        else
        {
            <button class="toggle-button" @onclick="ToggleSidebar" style="top:3.5%; left: @(descriptionFlag ? "20%" : "22%"); background-color:inherit;">☰</button>
        }

        @if (!toggleFlag)
        {
            <aside class="sidebar" id="sidebar">
                <div>
                    <div class="sidebar-header">
                        <h4>Menu</h4>
                    </div>
                    <EditForm Model="list" OnValidSubmit="@Search">
                        <InputText class="listSearch input-text" @bind-Value="search" placeholder="Search" />
                    </EditForm>
                    <ul class="sidebar-links">
                        <h5>
                            <span>Tasks</span>
                            <div class="menu-separator"></div>
                        </h5>
                        <li>
                            <a href="Upcomming">
                                <span class="material-symbols-outlined"> double_arrow </span>Upcomming
                                <span class="task-count">@countTotalList</span>
                            </a>
                        </li>
                        <li>
                            <a href="Today">
                                <span class="material-symbols-outlined"> lists </span>Today
                                <span class="task-count">@countTodayList</span>
                            </a>
                        </li>
                        <li>
                            <a href="StickyNotes">
                                <span class="material-symbols-outlined"> sticky_note </span>Sticky Walls
                                <span class="task-count">@countStickyList</span>
                            </a>
                        </li>
                        <h5>
                            <span>List</span>
                            <div class="menu-separator"></div>
                        </h5>
                        <li>
                            @foreach (var list in getList)
                            {
                                <a href="@list.listName"><span class="color" style="background-color:@list.color"></span>@list.listName</a>
                            }
                        </li>
                        <li>
                            <a @onclick="SetFlag" class="newListSelector"><span class="material-symbols-outlined"> add </span>Add new list</a>
                        </li>
                        @if (ListFlag)
                        {
                            <div class="color-picker-container">
                                <div class="list-header">
                                    <span class="color-indicator" style="background-color:@list.color;"></span>
                                    <EditForm Model="list" OnValidSubmit="@AddList">
                                        <InputText class="listName input-text" @bind-Value="list.listName" placeholder="List Name" />
                                    </EditForm>
                                </div>
                                <div class="color-options">
                                    @foreach (var color in Colors)
                                    {
                                        <button class="color-button" style="background-color:@color;" @onclick="() => SelectColor(color)">
                                            @if (color == list.color)
                                            {
                                                <span class="selected-indicator"></span>
                                            }
                                        </button>
                                    }
                                </div>
                                <div>
                                    <button class="btn-custom" @onclick="AddList">Add List</button>
                                </div>
                            </div>
                        }
                    </ul>
                </div>
                <ul class="sidebar-bottom-links">
                    <li>
                        <a href="#"><span class="material-symbols-outlined"> settings </span>Settings</a>
                    </li>
                    <li>
                        <a href="SignIn"><span class="material-symbols-outlined"> logout </span>Logout</a>
                    </li>
                </ul>
            </aside>
        }
    </div>

    <div class="container" style="margin-left:60px;">
        <h2 class="mb-5">Sticky Wall</h2>
        <div class="row">
            @foreach (var note in stickyList)
            {
                var color = Colors[colorIndex % Colors.Count];
                colorIndex++;

                <div class="col-md-4 mb-4">
                    <div class="sticky-note content-strategy" style="background-color:@color;">
                        <h3>@note.title</h3>
                        <p>@note.description</p>
                    </div>
                </div>
            }
            <div class="col-md-4 mb-4">
                <div class="sticky-note add-note">
                    @if (!stickyFlag)
                    {
                        <button @onclick="AddNewStickyNotes" class="add-note-bt">
                            <span class="plus-sign">+</span>
                        </button>
                    }
                    else
                    {
                        <EditForm Model="stickyNotes" OnSubmit="SubmitStickyNotes" class="EditForm">

                            <div>
                                <InputText id="taskName" @bind-Value="stickyNotes.title" placeholder="Title" class="form-control-stickyNotes" />
                            </div>
                            <div>
                                <InputTextArea id="description" @bind-Value="stickyNotes.description" placeholder="Description" class="form-control-stickyNotes" />
                            </div>
                            <div class="buttons mt-3">
                                <button type="submit" class="btn btn-warning btn-sm">Save</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</body>
</html>

@code {
    private ListInfo list = new ListInfo();
    private string? search;
    private bool toggleFlag = false;
    private bool descriptionFlag = true;
    private List<StickyNote> stickyList = new List<StickyNote>();
    private bool stickyFlag = false;
    private StickyNote stickyNotes = new StickyNote();
    private List<ListInfo> getList = new List<ListInfo>();
    private string listErrorMessage;
    private int colorIndex = 0;

    protected override void OnInitialized()
    {
        LoadList();
        list.color = "#0000ff";
    }
    private int countTotalList = 0, countTodayList = 0, countStickyList = 0;
    private List<TaskInfo> getAllTask = new List<TaskInfo>();
    private List<TaskInfo> getTodayTask = new List<TaskInfo>();
    private void LoadList()
    {
        getList = DALList.GetAllLists(global.Id);
        stickyList = DALStickyNotes.GetStickyNotes(global.Id);
        countStickyList = stickyList.Count();
        getAllTask = DALTask.GetTasks(global.Id);
        countTotalList = getAllTask.Count();
        getTodayTask = DALTask.GetTodayTasks(global.Id);
        countTodayList = getTodayTask.Count();
    }

    private List<string> Colors { get; set; } = new List<string>
{
    "#FFE9D0", "#FFFED3", "#BBE9FF", "#B1AFFF", "#91DDCF", "#E8C5E5", "#FFD18E", "#95D2B3", "#FFE8C8", "#CAF4FF", "#68D2E8"
};




    private bool ListFlag { get; set; }

    private void ToggleSidebar()
    {
        toggleFlag = !toggleFlag;
    }

    private void SetFlag()
    {
        ListFlag = !ListFlag;
    }

    private void SelectColor(string color)
    {
        list.color = color;
    }

    private void Search()
    {
        // Implement search logic here
    }

    private void AddList()
    {
        listErrorMessage = DALList.AddListInfo(global.Id, list);
        ListFlag = !ListFlag;
        LoadList();
    }

    private void AddNewStickyNotes()
    {

        stickyFlag = true;
    }

    private void SubmitStickyNotes()
    {
        DALStickyNotes.AddStickyNote(global.Id, stickyNotes);
        LoadList();
        stickyFlag = false;
    }
}
